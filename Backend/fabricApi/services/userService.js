const db = require("../config/connectToDB");
const { sendEmail } = require("../utils/mailSender");
const crypto = require("crypto");

exports.getUsers = async () => {
    try {
        const users = await db.query(
            "SELECT id, username, email, common_name, role, created_at FROM users"
        );
        return { success: true, users }; // Tr·∫£ v·ªÅ danh s√°ch ƒë·∫ßy ƒë·ªß
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
        throw new Error("L·ªói server");
    }
};

exports.getUserDetail = async (id) => {
    try {
        const [users] = await db.query(
            "SELECT id, username, email, citizen_id, role, common_name, organization, organizational_unit, country, state, locality, created_at FROM users WHERE id = ?",
            [id]
        );

        return { success: true, users };
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
        throw new Error("L·ªói server");
    }
};
exports.generateNewPassword = async (common_name, username, citizen_id) => {
    try {
        // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n (10 k√Ω t·ª± hex)
        const newPassword = crypto.randomBytes(5).toString("hex");
        console.log("M·∫≠t kh·∫©u m·ªõi:", newPassword);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi trong database
        const updateResult = await db.query(
            "UPDATE users SET enrollment_secret = ? WHERE common_name = ? AND username = ? AND citizen_id = ?",
            [newPassword, common_name, username, citizen_id]
        );

        // Ki·ªÉm tra xem c√≥ c·∫≠p nh·∫≠t ƒë∆∞·ª£c kh√¥ng
        if (!updateResult || updateResult.affectedRows === 0) {
            throw new Error(
                "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c m·∫≠t kh·∫©u."
            );
        }

        // Truy v·∫•n l·∫•y email c·ªßa ng∆∞·ªùi d√πng
        const [rows] = await db.query(
            "SELECT email FROM users WHERE common_name = ? AND username = ? AND citizen_id = ?",
            [common_name, username, citizen_id]
        );

        console.log(rows);
        // Ki·ªÉm tra xem c√≥ email hay kh√¥ng
        if (!rows || rows.length === 0) {
            throw new Error("Kh√¥ng t√¨m th·∫•y email ng∆∞·ªùi d√πng.");
        }

        const email = rows.email; // L·∫•y email t·ª´ k·∫øt qu·∫£ truy v·∫•n
        console.log("G·ª≠i email ƒë·∫øn:", email);

        // N·ªôi dung email
        let content = `
            <p>Xin ch√†o <strong>${username}</strong>,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu c·∫•p l·∫°i m·∫≠t kh·∫©u.</p>
            <p><strong>M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†:</strong> <code>${newPassword}</code></p>
            <p>Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi l·∫°i m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.</p>
            <p>Tr√¢n tr·ªçng,</p>
            <p>H·ªá th·ªëng Hyperledger Credential</p>
        `;

        // G·ª≠i email
        await sendEmail(email, "üîë M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n", content);

        return {
            success: true,
            message: "M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email.",
        };
    } catch (error) {
        console.error("L·ªói khi t·∫°o m·∫≠t kh·∫©u m·ªõi:", error);
        throw new Error("L·ªói server");
    }
};
exports.changePassword = async (
    username,
    oldPassword,
    newPassword,
    confirmPassword
) => {
    try {
        // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi v√† m·∫≠t kh·∫©u x√°c nh·∫≠n c√≥ tr√πng kh·ªõp kh√¥ng
        if (newPassword !== confirmPassword) {
            return {
                success: false,
                message: "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!",
            };
        }

        // L·∫•y user t·ª´ database
        const [rows] = await db
            .promise()
            .query("SELECT enrollment_secret FROM users WHERE username = ?", [
                username,
            ]);

        if (rows.length === 0) {
            return { success: false, message: "User kh√¥ng t·ªìn t·∫°i!" };
        }

        const user = rows[0];

        // So s√°nh m·∫≠t kh·∫©u c≈©
        if (oldPassword !== user.enrollment_secret) {
            return { success: false, message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" };
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
        await db
            .promise()
            .query(
                "UPDATE users SET enrollment_secret = ? WHERE username = ?",
                [newPassword, username]
            );

        return { success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
    } catch (error) {
        console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
        return { success: false, message: "L·ªói server!" };
    }
};

exports.getDegrees = async (id) => {
    try {
        const degrees = await db.query(
            "SELECT degrees.id,degree_name, status,issued_at, graduation_year, gpa, users.common_name FROM degrees, users Where degrees.user_id = users.id and users.id = ?",
            [id]
        );
        return { success: true, degrees }; // Tr·∫£ v·ªÅ danh s√°ch ƒë·∫ßy ƒë·ªß
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
        throw new Error("L·ªói server");
    }
};
// T·∫°o ch·ªânh s·ª≠a PIN
exports.createPin = async (req, res) => {
    try {
        const { pin, username } = req.body;

        // Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
        if (!validateInput(pin) || !validateInput(username)) {
            return res.status(400).json({
                data: {
                    success: false,
                    message: "Invalid input. Username and PIN are required.",
                },
            });
        }

        const sql = "UPDATE users SET pin_code = ? WHERE username = ?";
        const [result] = await db.promise().query(sql, [pin, username]);

        if (result.affectedRows === 0) {
            return res.status(404).json({
                data: {
                    success: false,
                    message: "User not found or PIN not updated.",
                },
            });
        }

        return res.status(200).json({
            data: {
                success: true,
                message: "PIN updated successfully.",
            },
        });
    } catch (error) {
        console.error("Error updating PIN:", error);
        return res.status(500).json({
            data: {
                success: false,
                message: "An error occurred while updating PIN.",
            },
        });
    }
};

// L·∫•y PIN
exports.getPin = async (req, res) => {
    try {
        const { username } = req.query;
        console.log("Request Body:", username); // Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n
        //Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
        if (!validateInput(username)) {
            return res.status(400).json({
                data: {
                    success: false,
                    message: "Invalid input. Username is required.",
                },
            });
        }

        const sql = "SELECT pin_code FROM users WHERE username = ?";
        const [rows] = await db.promise().query(sql, [username]);

        if (rows.length === 0) {
            return res.status(404).json({
                data: {
                    success: false,
                    message: "User not found.",
                },
            });
        }

        return res.status(200).json({
            data: {
                success: true,
                message: "PIN retrieved successfully.",
                pin: rows[0].pin_code,
            },
        });
    } catch (error) {
        console.error("Error retrieving PIN:", error);
        return res.status(500).json({
            success: false,
            message: "An error occurred while retrieving PIN.",
        });
    }
};
